{"ast":null,"code":"var _jsxFileName = \"D:\\\\New Folder\\\\Main\\\\Coding\\\\Python\\\\Data Science\\\\Projects\\\\Practice\\\\Indian Crop Agri\\\\rainfall\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dropdown = ({\n  options,\n  value,\n  onChange\n}) => /*#__PURE__*/_jsxDEV(\"select\", {\n  value: value,\n  onChange: onChange,\n  children: options.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: state,\n    children: state\n  }, state, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\n_c = Dropdown;\nconst App = () => {\n  _s();\n  const [fetchedData, setFetchedData] = useState([]);\n  const [selectedState, setSelectedState] = useState('');\n  const [plotUrl, setPlotUrl] = useState('');\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/states').then(response => {\n      if (response.data.length > 0) {\n        setSelectedState(response.data[0]);\n        setFetchedData(response.data);\n      } else {\n        console.log('No states found.');\n      }\n    }).catch(error => {\n      console.error('Error fetching states:', error);\n    });\n  }, []);\n  const fetchDataForSelectedState = useCallback(() => {\n    axios.get('http://localhost:5000/api/data', {\n      params: {\n        state: selectedState\n      }\n    }).then(response => {\n      setFetchedData(response.data);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, [selectedState]);\n  useEffect(() => {\n    if (selectedState !== '') {\n      fetchDataForSelectedState();\n    }\n  }, [selectedState, fetchDataForSelectedState]);\n  const handleStateChange = event => {\n    setSelectedState(event.target.value);\n  };\n  const handleGeneratePlot = () => {\n    axios.get('http://localhost:5000/api/rainfall_plot', {\n      params: {\n        state: selectedState\n      }\n    }).then(response => {\n      // Assuming the response contains the URL of the saved plot image\n      setPlotUrl(response.data.plot_url);\n    }).catch(error => {\n      console.error('Error generating plot:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"stateDropdown\",\n        children: \"Select State:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        options: fetchedData,\n        value: selectedState,\n        onChange: handleStateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGeneratePlot,\n        children: \"Generate Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), fetchedData.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: fetchedData.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.Annual_Rainfall\n      }, item.Crop_Year, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) : fetchedData.length === 0 && selectedState !== '' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available for the selected state.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }, this) : null, plotUrl !== '' && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: 'backend\\static\\plot.png',\n      alt: \"Rainfall Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Pzg1NkalP09eyKgOmC54JNTIkzE=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Dropdown\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","Dropdown","options","value","onChange","children","map","state","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s","fetchedData","setFetchedData","selectedState","setSelectedState","plotUrl","setPlotUrl","get","then","response","data","length","console","log","catch","error","fetchDataForSelectedState","params","handleStateChange","event","target","handleGeneratePlot","plot_url","htmlFor","onClick","item","Annual_Rainfall","Crop_Year","src","alt","_c2","$RefreshReg$"],"sources":["D:/New Folder/Main/Coding/Python/Data Science/Projects/Practice/Indian Crop Agri/rainfall/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\nconst Dropdown = ({ options, value, onChange }) => (\n  <select value={value} onChange={onChange}>\n    {options.map((state) => (\n      <option key={state} value={state}>\n        {state}\n      </option>\n    ))}\n  </select>\n);\n\nconst App = () => {\n  const [fetchedData, setFetchedData] = useState([]);\n  const [selectedState, setSelectedState] = useState('');\n  const [plotUrl, setPlotUrl] = useState('');\n\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/states')\n      .then(response => {\n        if (response.data.length > 0) {\n          setSelectedState(response.data[0]);\n          setFetchedData(response.data);\n        } else {\n          console.log('No states found.');\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching states:', error);\n      });\n  }, []);\n\n  const fetchDataForSelectedState = useCallback(() => {\n    axios.get('http://localhost:5000/api/data', { params: { state: selectedState } })\n      .then(response => {\n        setFetchedData(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n      });\n  }, [selectedState]);\n\n  useEffect(() => {\n    if (selectedState !== '') {\n      fetchDataForSelectedState();\n    }\n  }, [selectedState, fetchDataForSelectedState]);\n\n  const handleStateChange = (event) => {\n    setSelectedState(event.target.value);\n  };\n\n  const handleGeneratePlot = () => {\n    axios.get('http://localhost:5000/api/rainfall_plot', { params: { state: selectedState } })\n      .then(response => {\n        // Assuming the response contains the URL of the saved plot image\n        setPlotUrl(response.data.plot_url);\n      })\n      .catch(error => {\n        console.error('Error generating plot:', error);\n      });\n  };\n\n  return (\n    <div>\n      <h1>My App</h1>\n      <div>\n        <label htmlFor=\"stateDropdown\">Select State:</label>\n        <Dropdown options={fetchedData} value={selectedState} onChange={handleStateChange} />\n        <button onClick={handleGeneratePlot}>Generate Plot</button>\n      </div>\n      {fetchedData.length > 0 ? (\n        <ul>\n          {fetchedData.map(item => (\n            <li key={item.Crop_Year}>{item.Annual_Rainfall}</li>\n          ))}\n        </ul>\n      ) : (\n        fetchedData.length === 0 && selectedState !== '' ? (\n          <div>No data available for the selected state.</div>\n        ) : null\n      )}\n      {plotUrl !== '' && <img src={'backend\\static\\plot.png'} alt=\"Rainfall Plot\" />}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}