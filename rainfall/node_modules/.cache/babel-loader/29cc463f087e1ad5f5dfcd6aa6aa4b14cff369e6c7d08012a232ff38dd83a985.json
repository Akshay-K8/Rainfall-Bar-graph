{"ast":null,"code":"var _jsxFileName = \"D:\\\\New Folder\\\\Main\\\\Coding\\\\Python\\\\Data Science\\\\Projects\\\\Practice\\\\Indian Crop Agri\\\\rainfall\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [fetchedData, setFetchedData] = useState([]);\n  const [selectedState, setSelectedState] = useState('');\n  const [plotUrl, setPlotUrl] = useState('');\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/states').then(response => {\n      if (response.data.length > 0) {\n        const firstState = response.data[0]; // Get the first state from the fetched data\n        setSelectedState(firstState); // Set the first state as the initial selected state\n        setFetchedData(response.data);\n      } else {\n        console.log('No states found.');\n      }\n    }).catch(error => {\n      console.error('Error fetching states:', error);\n    });\n  }, []);\n  const fetchDataForSelectedState = useCallback(() => {\n    axios.get('http://localhost:5000/api/data', {\n      params: {\n        state: selectedState\n      }\n    }).then(response => {\n      setFetchedData(response.data);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, [selectedState]);\n  useEffect(() => {\n    if (selectedState !== '') {\n      fetchDataForSelectedState();\n      setPlotUrl(''); // Clear the plot URL when the state is changed\n    }\n  }, [selectedState, fetchDataForSelectedState]);\n  const handleStateChange = event => {\n    setSelectedState(event.target.value);\n  };\n  const handleGeneratePlot = () => {\n    axios.get('http://localhost:5000/api/rainfall_plot', {\n      params: {\n        state: selectedState\n      }\n    }).then(response => {\n      // Assuming the response contains the URL of the saved plot image\n      setPlotUrl(response.data.plot_url);\n    }).catch(error => {\n      console.error('Error generating plot:', error);\n    });\n  };\n  const handleShowPlot = () => {\n    if (selectedState !== '') {\n      handleGeneratePlot();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"stateInput\",\n        children: \"Enter State:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"stateInput\",\n        value: selectedState,\n        onChange: handleStateChange,\n        placeholder: \"Enter state name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShowPlot,\n        children: \"Show Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), plotUrl !== '' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Rainfall Plot for \", selectedState]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: plotUrl,\n        alt: \"Rainfall Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Pzg1NkalP09eyKgOmC54JNTIkzE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","App","_s","fetchedData","setFetchedData","selectedState","setSelectedState","plotUrl","setPlotUrl","get","then","response","data","length","firstState","console","log","catch","error","fetchDataForSelectedState","params","state","handleStateChange","event","target","value","handleGeneratePlot","plot_url","handleShowPlot","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","placeholder","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/New Folder/Main/Coding/Python/Data Science/Projects/Practice/Indian Crop Agri/rainfall/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\nconst App = () => {\n  const [fetchedData, setFetchedData] = useState([]);\n  const [selectedState, setSelectedState] = useState('');\n  const [plotUrl, setPlotUrl] = useState('');\n\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/states')\n      .then(response => {\n        if (response.data.length > 0) {\n          const firstState = response.data[0]; // Get the first state from the fetched data\n          setSelectedState(firstState); // Set the first state as the initial selected state\n          setFetchedData(response.data);\n        } else {\n          console.log('No states found.');\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching states:', error);\n      });\n  }, []);\n\n  const fetchDataForSelectedState = useCallback(() => {\n    axios.get('http://localhost:5000/api/data', { params: { state: selectedState } })\n      .then(response => {\n        setFetchedData(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n      });\n  }, [selectedState]);\n\n  useEffect(() => {\n    if (selectedState !== '') {\n      fetchDataForSelectedState();\n      setPlotUrl(''); // Clear the plot URL when the state is changed\n    }\n  }, [selectedState, fetchDataForSelectedState]);\n\n  const handleStateChange = (event) => {\n    setSelectedState(event.target.value);\n  };\n\n  const handleGeneratePlot = () => {\n    axios.get('http://localhost:5000/api/rainfall_plot', { params: { state: selectedState } })\n      .then(response => {\n        // Assuming the response contains the URL of the saved plot image\n        setPlotUrl(response.data.plot_url);\n      })\n      .catch(error => {\n        console.error('Error generating plot:', error);\n      });\n  };\n\n  const handleShowPlot = () => {\n    if (selectedState !== '') {\n      handleGeneratePlot();\n    }\n  };\n\n\n  return (\n    <div>\n      <h1>My App</h1>\n      <div>\n        <label htmlFor=\"stateInput\">Enter State:</label>\n        <input\n          type=\"text\"\n          id=\"stateInput\"\n          value={selectedState}\n          onChange={handleStateChange}\n          placeholder=\"Enter state name\"\n        />\n        <button onClick={handleShowPlot}>Show Plot</button>\n      </div>\n      {/* Display the plot image if the URL is available */}\n      {plotUrl !== '' && (\n        <div>\n          <h2>Rainfall Plot for {selectedState}</h2>\n          <img src={plotUrl} alt=\"Rainfall Plot\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}