{"ast":null,"code":"var _jsxFileName = \"D:\\\\New Folder\\\\Main\\\\Coding\\\\Python\\\\Data Science\\\\Projects\\\\Practice\\\\Indian Crop Agri\\\\rainfall\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedState, setSelectedState] = useState(''); // Default state is empty\n\n  useEffect(() => {\n    // Fetch data from the Flask backend API with the selected state\n    if (selectedState !== '') {\n      // Only fetch data when a state is selected\n      axios.get('http://localhost:5000/api/data', {\n        params: {\n          state: selectedState\n        }\n      }).then(response => setData(response.data)).catch(error => console.log(error));\n    }\n  }, [selectedState]); // Fetch data whenever the selectedState changes\n\n  useEffect(() => {\n    // Fetch the list of unique states from the Flask backend API\n    axios.get('http://localhost:5000/api/states').then(response => {\n      // Set the first state as the default value in the dropdown\n      if (response.data.length > 0) {\n        setSelectedState(response.data[0]);\n      }\n    }).catch(error => console.log(error));\n  }, []); // Fetch the unique states only once when the component mounts\n\n  const handleStateChange = event => {\n    setSelectedState(event.target.value); // Update the selectedState when the dropdown value changes\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"stateDropdown\",\n        children: \"Select State:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"stateDropdown\",\n        value: selectedState,\n        onChange: handleStateChange,\n        children: data.map((state, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: state,\n          children: state\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.Annual_Rainfall\n      }, item.Crop_Year, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 27\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Vn/atpBOkRxQDP2v1mwbAZ6E0+k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","data","setData","selectedState","setSelectedState","get","params","state","then","response","catch","error","console","log","length","handleStateChange","event","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","map","index","item","Annual_Rainfall","Crop_Year","_c","$RefreshReg$"],"sources":["D:/New Folder/Main/Coding/Python/Data Science/Projects/Practice/Indian Crop Agri/rainfall/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [selectedState, setSelectedState] = useState(''); // Default state is empty\n\n  useEffect(() => {\n    // Fetch data from the Flask backend API with the selected state\n    if (selectedState !== '') { // Only fetch data when a state is selected\n      axios.get('http://localhost:5000/api/data', { params: { state: selectedState } })\n        .then(response => setData(response.data))\n        .catch(error => console.log(error));\n    }\n  }, [selectedState]); // Fetch data whenever the selectedState changes\n\n  useEffect(() => {\n    // Fetch the list of unique states from the Flask backend API\n    axios.get('http://localhost:5000/api/states')\n      .then(response => {\n        // Set the first state as the default value in the dropdown\n        if (response.data.length > 0) {\n          setSelectedState(response.data[0]);\n        }\n      })\n      .catch(error => console.log(error));\n  }, []); // Fetch the unique states only once when the component mounts\n\n  const handleStateChange = (event) => {\n    setSelectedState(event.target.value); // Update the selectedState when the dropdown value changes\n  };\n\n  return (\n    <div>\n      <h1>My App</h1>\n      <div>\n        <label htmlFor=\"stateDropdown\">Select State:</label>\n        <select id=\"stateDropdown\" value={selectedState} onChange={handleStateChange}>\n          {data.map((state, index) => (\n            <option key={index} value={state}>{state}</option>\n          ))}\n        </select>\n      </div>\n      <ul>\n        {data.map(item => <li key={item.Crop_Year}>{item.Annual_Rainfall}</li>)}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}