{"ast":null,"code":"var _jsxFileName = \"D:\\\\New Folder\\\\Main\\\\Coding\\\\Python\\\\Data Science\\\\Projects\\\\Practice\\\\Indian Crop Agri\\\\rainfall\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dropdown = ({\n  options,\n  value,\n  onChange\n}) => /*#__PURE__*/_jsxDEV(\"select\", {\n  value: value,\n  onChange: onChange,\n  children: options.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: state,\n    children: state\n  }, state, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\n_c = Dropdown;\nconst App = () => {\n  _s();\n  const [fetchedData, setFetchedData] = useState([]); // Separate state for fetched data\n  const [selectedState, setSelectedState] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/states').then(response => {\n      if (response.data.length > 0) {\n        setSelectedState(response.data[0]);\n      }\n      setLoading(false);\n    }).catch(error => {\n      setError('Error fetching states.');\n      setLoading(false);\n    });\n  }, []);\n  useEffect(() => {\n    if (selectedState !== '') {\n      setLoading(true);\n      setError('');\n      axios.get('http://localhost:5000/api/data', {\n        params: {\n          state: selectedState\n        }\n      }).then(response => {\n        setFetchedData(response.data); // Store the fetched data separately\n        setLoading(false);\n      }).catch(error => {\n        setError('Error fetching data.');\n        setLoading(false);\n      });\n    }\n  }, [selectedState]);\n  const handleStateChange = event => {\n    setSelectedState(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"stateDropdown\",\n        children: \"Select State:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Dropdown, {\n        options: fetchedData,\n        value: selectedState,\n        onChange: handleStateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), !loading && fetchedData.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: fetchedData.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.Annual_Rainfall\n      }, item.Crop_Year, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available for the selected state.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"8ba1wIag2ZeT7iiUKv8+XmQxsKE=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Dropdown\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Dropdown","options","value","onChange","children","map","state","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s","fetchedData","setFetchedData","selectedState","setSelectedState","loading","setLoading","error","setError","get","then","response","data","length","catch","params","handleStateChange","event","target","htmlFor","item","Annual_Rainfall","Crop_Year","_c2","$RefreshReg$"],"sources":["D:/New Folder/Main/Coding/Python/Data Science/Projects/Practice/Indian Crop Agri/rainfall/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Dropdown = ({ options, value, onChange }) => (\n  <select value={value} onChange={onChange}>\n    {options.map((state) => (\n      <option key={state} value={state}>\n        {state}\n      </option>\n    ))}\n  </select>\n);\n\nconst App = () => {\n  const [fetchedData, setFetchedData] = useState([]); // Separate state for fetched data\n  const [selectedState, setSelectedState] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/states')\n      .then(response => {\n        if (response.data.length > 0) {\n          setSelectedState(response.data[0]);\n        }\n        setLoading(false);\n      })\n      .catch(error => {\n        setError('Error fetching states.');\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (selectedState !== '') {\n      setLoading(true);\n      setError('');\n\n      axios.get('http://localhost:5000/api/data', { params: { state: selectedState } })\n        .then(response => {\n          setFetchedData(response.data); // Store the fetched data separately\n          setLoading(false);\n        })\n        .catch(error => {\n          setError('Error fetching data.');\n          setLoading(false);\n        });\n    }\n  }, [selectedState]);\n\n  const handleStateChange = (event) => {\n    setSelectedState(event.target.value);\n  };\n\n  return (\n    <div>\n      <h1>My App</h1>\n      <div>\n        <label htmlFor=\"stateDropdown\">Select State:</label>\n        {loading ? (\n          <div>Loading...</div>\n        ) : (\n          <Dropdown options={fetchedData} value={selectedState} onChange={handleStateChange} />\n        )}\n        {error && <div>Error: {error}</div>}\n      </div>\n      {!loading && fetchedData.length > 0 ? (\n        <ul>\n          {fetchedData.map(item => (\n            <li key={item.Crop_Year}>{item.Annual_Rainfall}</li>\n          ))}\n        </ul>\n      ) : (\n        <div>No data available for the selected state.</div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}